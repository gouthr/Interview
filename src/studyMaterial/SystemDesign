Design Twitter:
===============

Use cases / Core features:
Lets define twitter to its MVP (Minimum Viable Product).
1. Users can follow other users
2. Users can read other user's feed whom they follow

Data model:
User and Feed objects
Relation between users - one user following other user
Relation between users and feeds - every feed has a owner user

Server feed:
List tweets from users they follow with the most recent at the top. Don't have to list all the tweets. 
Say top 20 at a time - Pagination. The feed could be ranked based on time or other personal traits like
user's common interests. Tweets from users from the same location. Tweets from users with most common friends.
Tweets from famous celebrities followed by the user.

@ and retweet feature. Any feed with the user mentioned using @ also needs to be listed in the feed.
Retweet also include the owner user id to be shown when retweeted.

Talk about the below features:
1. Trending topics
	- Generate and rank the top trending topics. Could be based on frequency of hash tags,
	Search query terms, pick common words/phrases from the top 'N' news topics in the last n hours.
	-Ranking the topics could be based on user's interests (based on favorites, retweets and comments) 
2. Moments
	- Organize the trending topics into pre-defined categories like news, sports, fun etc.
	- List the trending topics and organize them into categories. Rank the tweets in each category.
3. Whom to follow / Recommendation system
	- Recommendation system based on machine learning to recommend other users to follow
	- Provide following graphs users 2 to 3 steps away with common friends, common interests, common location,
	Users with more followers could be ranked higher while listing
	- Also include famous personalities with large number of followers in user's choice of interest
4. Search for feed
	- Weight given to certain social aspects when searching and listing search queries

How to detect fake users  -machine learning systems based on number of followers, tweets and amount of time logged in etc.

Design Youtube:
===============
1. Storage and data model - Youtube uses MySql DB
	- User and video tables
	- User can have login and personal details - these can be 2 separate tables
	- Video contains video metadata, likes count, view count, shares etc.
	- Relation bw users and videos - video uploaded by user, video liked by user
	
	Scaling the DB
	- Start with a single server and scale as needed as features and use case keep changing
	- Master slave model - writes to master, reads from multiple slaves
	- Sharding the DB based on user's location, route the request to the appropriate DB
	
2. Video and image storage
	- Youtube has more images than videos - multiple size images and thumbnails
3. Popular vs long tailed videos
	- Popular videos can be hosted on CDN (Content Delivery Network - nw of proxy servers around the world)
	- Long tailed videos are videos with less view counts per day (less popular), these can be stored closer to the user
	to enhance performance
	- Performance can be optimized by having separate clusters for videos and general data
4. Web server
	- a bunch of web servers behind a load balancer
	- These servers deal with authentication, session management and less heavy business logic
	- More business heavy logic are routed to dedicated servers like recommendation server, video storage server
	- A cache at the web server level and also a cache at the front end will enhance the performance for the user
5. Security
	- We also need to handle hacking view counts - These can be detected by looking at the origin IP,
	also view counts need to go with view time and other statistics like comments, likes etc. With historical data available,
	it wouldn't be difficult to predict usage patterns and detect fake view counts - a dedicated machine learning system to detect
	video hacking could be used




