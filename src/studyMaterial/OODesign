OO design of a deck of cards:
=============================

public abstract class Card {
	int faceValue;
	Suit suit;
	
	public Card(int f, Suit s) {
		this.faceValue = f;
		this.suit = s;
	}
	
	public int getValue() {
		return faceValue;
	}
	
	public Suit getSuit() {
		return suit;
	}
}

public enum Suit {
	Diamond,
	Club,
	Heart,
	Spade
}

public class Deck<T extends Card> {
	ArrayList<T> cards;
	int undealtIndex = 0;
	
	public void setDeckOfCards(ArrayList<T> cards) { ... }
	
	public void shuffle() { ... }
	
	public T[] dealHand() { ... }
	
	public T dealCard() { ... }
	
	public int remainingCards() {
		return cards.size() - undealtIndex;
	}	
}

public class Hand<T extends Card> {
	ArrayList<T> cards;
	
	public int score() {
		int score = 0;
		for (T card : cards) {
			score+=card.getValue();
		}
		return score;
	}
	
	public void addCard(T card) {
		cards.add(card);
	}
}

public class BlackJackCard extends Card {
	public BlackJackCard(int v, Suit s) {
		super(v, s);
	}
	
	public int getValue() {
		if (faceValue>=10 && faceValue<=13) {
			return 10;
		} else {
			return faceValue;
		}
	}
}

Design an in-memory FileSystem:
===============================

File System:
	-File
	-Directory

public abstract class Entry {
	String name;
	Directory parent;
	long created;
	long updated;
	long accessed;
	
	public Entry(String n, Directory p) {
		name = n;
		parent = p;
		created = System.currentTimeMillis();
		updated = System.currentTimeMillis();
		accessed = System.currentTimeMillis();
	}
	
	public abstract int size();
	
	public String getFullPath() {
		if (parent == null) {
			return name;
		} else {
			return parent.getFullPath() + "/" + name;
		}
	}
}

public class File extends Entry {
	int size;
	String content;
	
	public File(String name, Directory parent, int size) {
		super(name, parent);
		this.size = size;
	}
	
	public int size() {
		return size;
	}
	
	public void write(String content) {
		this.content = content;
	}
	
	public String read() {
		return content;
	}
}

public class Directory extends Entry {
	List<Entry> contents;
	
	public Directory(String name, Directory parent) {
		super(name, parent);
		contents = new ArrayList<Entry>();
	}
	
	public int size() {
		int sum = 0;
		for (Entry entry : contents) {
			sum+=entry.size();
		}
		return sum;
	}
	
	public int numFiles() {
		int count = 0;
		for (Entry entry : contents) {
			if (entry instanceof Directory) {
				count++; //directory counts as a file
				Directory d = (Directory) e;
				count += d.numFiles();
			} else {
				count++;
			}
		}
		return count;
	}
	
	public void addEntry(Entry entry) {
		contents.add(entry);
	}
	
	public boolean deleteEntry(Entry entry) {
		return contents.remove(entry);
	}
	
	public List<Entry> getContents() {
		return contents;
	}
}

Design and implement a key:value hash-map:
===========================================
class MyHashMap {
    private static final int SIZE = 32;

    class Entry {
        String key;
        String value;
        Entry next;
        Entry(String key, String value) {
            this.key = key;
            this.value = value;
            next = null;
        }
    }

    private Entry[] table;

    public MyHashMap() {
        table = new Entry[SIZE];
    }

    public void put(String key, String value) {
        Entry entry = new Entry(key, value);
        int code = key.hashCode() % SIZE;
        if (table[code] == null) {
            table[code] = entry;
        } else {
            addOrUpdateNode(table[code], entry);
        }
    }

    public String get(String key) {
        int code = key.hashCode() % SIZE;
        Entry head = table[code];
        while (head != null) {
            if (head.key.equals(key)) return head.value;
            head = head.next;
        }
        return null;
    }

    public void remove(String key) {
        int code = key.hashCode() % SIZE;
        Entry head = table[code];
        Entry dummy = new Entry("0", "0");
        dummy.next = head;
        Entry prev = dummy;
        while (head != null) {
            if (head.key.equals(key)) prev.next = head.next;
            prev = head;
            head = head.next;
        }
        table[code] = dummy.next;
    }

    public boolean containsKey(String key) {
        int code = key.hashCode() % SIZE;
        Entry head = table[code];
        while (head != null) {
            if (head.key.equals(key)) return true;
            head = head.next;
        }
        return false;
    }

    private void addOrUpdateNode(Entry head, Entry node) {
        Entry prev = head;
        while (head != null) {
            if (head.key.equals(node.key)) {
                head.value = node.value;
                return;
            }
            prev = head;
            head = head.next;
        }
        prev.next = node;
    }
}